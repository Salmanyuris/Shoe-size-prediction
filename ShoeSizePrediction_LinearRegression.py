# -*- coding: utf-8 -*-
"""Tugas Kelompok 2 PBL Machine Learning.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1lVT_cYpeOqdNb0fR3g9MgYXGG8yDpB8J

Memuat Library yang diperlukan selama proses analisis
"""

import numpy as np
import pandas as pd
from sklearn import linear_model
from scipy import stats
import sklearn.metrics as sm
from sklearn.model_selection import train_test_split
import matplotlib.pyplot as plt

"""Mendefinisikan lokasi file dalam bentuk kode, dari google drive"""

input_file = f'https://drive.google.com/uc?id=12y4yjLottmCkwRcky7uH_3lneQluY5tC'

"""Mengkoneksikan antara google collabs dengan google drive"""

from google.colab import drive
drive.mount('/content/drive')

"""Melakukan import dataset dalam bentuk CSV"""

data = pd.read_csv(input_file, sep=',', header=None)

"""Melihat distrbusi data dari Tinggi Badan (X)"""

eda = plt.figure(figsize=(12,4))
eda.add_subplot(1,2,1)
data[0].plot(kind='kde')

eda.add_subplot(1,2,1)
plt.boxplot(data[0])
plt.show()

"""Melihat distrbusi data dari Ukuran Sepatu (Y)"""

eda = plt.figure(figsize=(12,4))
eda.add_subplot(1,2,1)
data[1].plot(kind='kde', c='r')

eda.add_subplot(1,2,1)
plt.boxplot(data[1])
plt.show()

"""Melihat sebaran data dalam bentuk scatter"""

plt.scatter(data[0], data[1])
plt.xlabel('Tinggi Badan')
plt.ylabel('Ukuran Sepatu')
plt.title('Tinggi Badan vs Ukuran Sepatu')
plt.show()

"""Mengetahui korelasi dari tinggi badan dan ukuran sepatu"""

data.corr()

"""Mendefinisikan variabel X dan Y"""

x = data[0].values.reshape(-1,1)
y= data[1].values.reshape(-1,1)

"""Mendefinisikan Data Training (65%) dan Data Test (35%)"""

x_train, x_test, y_train, y_test = train_test_split(x, y, test_size=0.35)

"""Membuat object regresi, di dalam object ini kita akan dapat menggunakan berbagai macam tools yang berguna dalam menganalis data menggunanakan regresi linear"""

regressor = linear_model.LinearRegression()

"""Melakukan Proses Training pada Dataset. Dalam hal ini, data yang dimasukkan adalah data training. Data training yang dimasukkan ada 2 data. Data yang pertama (x) adalah data tinggi badan, dan data yang kedua (y) adalah ukuran sepatu"""

regressor.fit(x_train, y_train)

"""Menentukan Nilai Koefisien (M) dan Nilai Intercept (b)"""

M = regressor.coef_[0][0]
b = regressor.intercept_[0]

"""Rumus yang didapatkan dari perhitungan Regresi Linear"""

print("Y = ", round(M, 2), "X + ", round(b, 2), sep="")

"""Menghitung skor akurasi antara data prediksi yang didapat dari menghitung data training dengan nilai pada data testing"""

regressor.score(x_test, y_test)

"""Melakukan prediksi pada diagram. Lingkaran biru menggambarkan titik data aktual. Sedangkan garis mengambarkan titik data prediksi"""

y_pred = regressor.predict(x_test)
plt.scatter(x_test, y_test)
plt.plot(x_test, y_pred, c='r')
plt.xlabel('Tinggi Badan')
plt.ylabel('Ukuran Sepatu')
plt.title('Tinggi Badan vs Ukuran Sepatu')

"""- Menghitung Mean Absolute Error (rata-rata selisih mutlak nilai sebenarnya (aktual) dengan nilai prediksi (peramalan))
- Menghitung Mean Squared Error (melakukan pengurangan nilai data aktual dengan data peramalan dan hasilnya dikuadratkan (squared) kemudian dijumlahkan secara keseluruhan dan membaginya dengan banyaknya data yang ada)
- Menghitung Median Absolute Error (kesalahan prediksi dengan cara menghitung nilai absolut dari selisih antara prediksi dan nilai yang sebenarnya, kemudian mengambil nilai median dari seluruh nilai absolut tersebut)
- Mengitung nilai R2 (koefisien determinasi yang menjelaskan seberapa jauh data dependen dapat dijelaskan oleh data independen)
"""

print("Mean AE\t\t: ", round(sm.mean_absolute_error(y_test, y_pred), 2))
print("MSE\t\t: ", round(sm.mean_squared_error(y_test, y_pred), 2))
print("Median AE\t: ", round(sm.median_absolute_error(y_test, y_pred), 2))
print("R2\t\t: ", round(sm.r2_score(y_test, y_pred), 2))

"""Melakukan test terhadap rumus regresi linear"""

tinggi_badan = 164.5

y = regressor.predict([[tinggi_badan]])[0][0]
print("Hasil Prediksi :", round(y) )

"""Membandingkan data aktual dengan data prediksi menggunakan data testing"""

y_pred = regressor.predict(x_test)
hasil = pd.DataFrame({"Tinggi Badan" : x_test.flatten(), 'Data Aktual' : y_test.flatten(), 'Data Prediksi' : np.round(y_pred.flatten())})
hasil